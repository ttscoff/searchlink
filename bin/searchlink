#!/usr/bin/env ruby
# encoding: utf-8

SILENT = ENV['SL_SILENT'] =~ /false/i ? false : true
$LOAD_PATH.unshift File.join(__dir__, '..')

# import
require 'lib/searchlink'

if RUBY_VERSION.to_f > 1.9
  Encoding.default_external = Encoding::UTF_8
  Encoding.default_internal = Encoding::UTF_8
end

sl = SL::SearchLink.new({ echo: false })

SL::Searches.load_custom

# # ignore
# SL::Searches.load_searches

overwrite = true
backup = SL.config['backup']

if !ARGV.empty?
  files = []
  ARGV.each do |arg|
    case arg
    when /^(--?)?h(elp)?$/
      print SL.version_check
      puts
      sl.help_cli
      $stdout.puts 'See https://github.com/ttscoff/searchlink/wiki for help'
      Process.exit 0
    when /^(--?)?v(er(s(ion)?)?)?$/
      print SL.version_check
      Process.exit 0
    when /^--?(stdout)$/
      overwrite = false
    when /^--?no[-_]backup$/
      backup = false
    else
      files.push(arg)
    end
  end

  files.each do |file|
    if File.exist?(file) && `file -b "#{file}"|grep -c text`.to_i.positive?
      input = IO.read(file).scrubup

      backup_file = "#{file}.bak"
      backup_file = "#{file}.bak 1" if File.exist?(backup_file)
      backup_file.next! while File.exist?(backup_file)

      FileUtils.cp(file, backup_file) if backup && overwrite

      sl.parse(input)
      output = SL.output&.join('')

      next unless output

      if overwrite
        File.open(file, 'w') do |f|
          f.puts output
        end
      else
        puts output || input
      end
    else
      warn "Error reading #{file}"
    end
  end
else
  input = $stdin.read.scrubup
  sl.parse(input)
  output = SL.output&.join('')

  if SL.clipboard
    print input
  else
    print output
  end
end
